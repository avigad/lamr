.. _chapter_deduction_for_first_order_logic:

Deduction for First-Order Logic
===============================

The fundamental difference between propositional logic and first-order logic
is that in first-order logic there are variables and terms
that stand for objects, and we can form atomic propositions that depend on those objects.
Within the framework, the two key ingredients are equality and the quantifiers.
Deduction systems for first-order logic have to extend those for propositional logic
by providing rules for these.

As was the case for propositional logic, all the deductive systems we describe in this
section are sound and complete for first-order logic,
though we do not provide detailed proofs here.


Axiomatic systems
-----------------

We have already discussed equational reasoning in :numref:`section_equality`.
We have seen that the natural rules for equality are given by reflexivity, symmetry,
transitivity, and congruence with respect to functions and relations.
These can be expressed as rules, but also as first-order axioms:

- :math:`\fa x x = x`
- :math:`\fa {x, y} x = y \limplies y = x`
- :math:`\fa {x, y, z} x = y \land y = z \limplies x = z`
- :math:`\fa {x_1, \ldots, x_n, y_1, \ldots, y_n} x_1 = y_1 \land \cdots x_n = y_n \limplies f(x_1, \ldots, x_n) = f(y_1, \ldots, y_n)`
- :math:`\fa {x_1, \ldots, x_n, y_1, \ldots, y_n} x_1 = y_1 \land \cdots x_n = y_n \land R(x_1, \ldots, x_n) \limplies R(y_1, \ldots, y_n)`.

From these, we can derive substitution for terms and formulas:

- :math:`\fa {x, y} x = y \limplies t(x) = t(y)`
- :math:`\fa {x, y} x = y \land A(x) \limplies A(y)`

Sometimes these are taken as axioms instead of congruence.
Remember that we are adopting the convention what when we use notation like :math:`t(x)`,
we have in mind a certain variable :math:`z` that :math:`t` might depend on and we take
:math:`t(x)` to stand for :math:`t[x/z]` and :math:`t(y)` to stand for :math:`t[y/z]`.
Similar conventions hold for formula :math:`A(x)`.

The axioms for the quantifiers follow naturally from their meanings:

- :math:`(\fa x A) \limplies A[t/x]`
- :math:`A[t/x] \limplies \ex x A`.

The first says that if :math:`A` holds of everything, then it holds of any particular thing,
and the second says that if :math:`A` holds of any particular thing, then it holds of something.

These axioms are only half the story, though. The first axiom tells us how to *use* a statement
that starts with a universal quantifier but not how to *prove* it, and the second one tells us
how to prove a statement with an existential quantifier but not how to use it. How do we
prove :math:`\fa x A`? Establishing :math:`\fa x A` involves showing that :math:`A` holds of
an arbitrary value of :math:`x`. To do that, we let :math:`x` be arbitrary, and prove :math:`A`.
This suggests the following rule of generalization:

  From :math:`A`, conclude :math:`\fa x A`.

The actual rule we use is a generalization of this: if we have shown that :math:`A` follows
from :math:`B`, and :math:`B` doesn't say anything about :math:`x`, then we have shown that
:math:`B` implies that :math:`A` holds for any :math:`x` at all.

- From :math:`B \limplies A` conclude :math:`B \limplies \fa x A`, assuming :math:`x` is not free in :math:`B`.

The dual rule for the existential quantifier says that if :math:`B` follows from the assumption
that :math:`A` holds of some :math:`x`, then :math:`B` follows from the assumption
that there exists an :math:`x` satisfying :math:`B`.

- From :math:`A \limplies B` conclude :math:`(\ex x A) \limplies B`, assuming :math:`x` is not free in :math:`B`.


A sequent calculus
------------------

We can also extend the cut-free sequent calculus described in :numref:`section_propositional_sequent_calculus` to first-order logic.
Remember that the system derives sets of formulas :math:`\Gamma` in negation-normal form.
We interpret a proof as telling us that in any model, and with any assignment to the free
variables, at least one of the formula in :math:`\Gamma` is true.
In the case of propositional logic, we took the axioms to be finite sets :math:`\Gamma`
that contain a complementary pair of atoms :math:`P` and :math:`\lnot P`.
In the presence of equality, we now take the axioms to be sets :math:`\Gamma` such that
the set of negations of those formulas can be refuted using equational reasoning.
For example, :math:`\lnot P(a), a \ne b, P(b)` is an axiom, because equational reasoning
refutes the set :math:`P(a), a = b, \lnot P(b)`.
We can determine whether a finite set of formulas is an axiom using congruence closure.

The other rules of the system are as follows:

  .. raw:: html

      \[\begin{prooftree}
      \AXC{$\Gamma, A$}
      \AXC{$\Gamma, B$}
      \BIC{$\Gamma, A \land B$}
      \end{prooftree} \quad\quad
      \begin{prooftree}
      \AXC{$\Gamma, A, B$}
      \UIC{$\Gamma, A \lor B$}
      \end{prooftree}
      \]

      \[\begin{prooftree}
      \AXC{$\Gamma, A$}
      \UIC{$\Gamma, \fa x A$}
      \end{prooftree}
      \quad\quad
      \begin{prooftree}
      \AXC{$\Gamma, A[t/x]$}
      \UIC{$\Gamma, \ex x A$}
      \end{prooftree}
      \]</div>

  .. raw:: latex

      \begin{center}
      \AXC{$\Gamma, A$}
      \AXC{$\Gamma, B$}
      \BIC{$\Gamma, A \land B$}
      \DP \quad \quad
      \AXC{$\Gamma, A, B$}
      \UIC{$\Gamma, A \lor B$}
      \DP \\
      \ \\
      \AXC{$\Gamma, A$}
      \UIC{$\Gamma, \fa x A$}
      \DP \quad \quad
      \AXC{$\Gamma, A[t/x]$}
      \UIC{$\Gamma, \ex x A$}
      \DP
      \end{center}

In the rule for the universal quantifier, we require that :math:`x` is not free in any formula
in :math:`\Gamma`. This is analogous to the requirement in the previous section that :math:`x`
is not free in the formula :math:`B` in the generalization rule.
You can think of it as saying that :math:`x` is really arbitrary.

As in :numref:`section_propositional_sequent_calculus`, we can add the cut rule, which represents
a form of modus ponents. In class, we will sketch a proof that this system is complete even
without the cut rule.

Resolution
----------



Natural deduction
-----------------